Here's What You Need to Do:
1. Add These Files to Your Repository
I've created the fixed versions of the files above. You need to:

Replace your app/random/page.tsx (or .js) with the fixed version I provided
Update your prisma/schema.prisma with the schema I provided
Create the render-build.sh script in your root directory
Update your package.json with these scripts:

json{
  "scripts": {
    "dev": "next dev",
    "build": "prisma generate && next build",
    "start": "next start",
    "lint": "next lint",
    "postinstall": "prisma generate"
  }
}
2. Set Up PostgreSQL Database on Render

Go to Render Dashboard
Click "New +" → "PostgreSQL"
Configure:

Name: afrowiki-database
Database: afrowiki
User: Leave default
Region: Same as your web service (e.g., Oregon)
PostgreSQL Version: 16
Plan: Free


Click "Create Database"
Wait for creation (~2 minutes)
Once created, go to the database dashboard
Copy the "Internal Database URL" (starts with postgresql://)

3. Configure Your Web Service

Go to your Web Service on Render
Click on "Environment" tab
Add this environment variable:

   Key: DATABASE_URL
   Value: [Paste the Internal Database URL from step 2.7]

Go to "Settings" tab
Update:

Build Command: chmod +x render-build.sh && ./render-build.sh
Start Command: npm start



4. Commit and Push Your Changes
bashgit add .
git commit -m "Fix deployment: Add dynamic rendering and database configuration"
git push origin main
5. Manual Deploy

In Render dashboard, go to your web service
Click "Manual Deploy" → "Deploy latest commit"

The Key Fixes Applied:

✅ Added export const dynamic = 'force-dynamic' to the /random page to prevent static generation
✅ Added DATABASE_URL check to gracefully handle missing database during build
✅ Created proper Prisma schema with PostgreSQL configuration
✅ Added build script that handles Prisma generation and database setup
✅ Configured proper error handling for database connections

After Deployment:
Once deployed, you can verify everything works by:

Checking the Render logs for successful deployment
Visiting https://your-app.onrender.com
Testing the /random route

The deployment should now complete successfully! The main issue was that Next.js was trying to statically generate pages that require database access, which fails when DATABASE_URL isn't available during build time. The force-dynamic export forces these pages to be rendered on-demand instead.