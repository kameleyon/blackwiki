generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String        @default("user")
  password      String?
  bio           String?
  location      String?
  website       String?
  wecherp       String?
  expertise     String?
  interests     String?
  joinedAt      DateTime      @default(now())
  lastActive    DateTime      @default(now())
  accounts      Account[]
  articles      Article[]     @relation("AuthoredArticles")
  comments      Comment[]
  edits         Edit[]
  sessions      Session[]
  commentLikes  CommentLike[]
  reviews       Review[]      @relation("ReviewedBy") // Reviews performed by this user
  reviewTasks   Review[]      @relation("AssignedTo") // Reviews assigned to this user
  branches      Branch[]      @relation("UserBranches")
  talkMessages  ArticleTalk[]
  discussionMessages DiscussionMessage[] @relation("DiscussionAuthor") // Discussion messages authored by this user
  watchedArticles Watchlist[] // Articles this user is watching
  auditLogs     AuditLog[] // Actions performed by this user
  reviewerReputation Int @default(0) // Reputation score based on review quality/activity
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String      @id @default(cuid())
  title       String
  content     String
  summary     String
  slug        String      @unique
  image       String?
  imageAlt    String?
  imageWidth  Int?
  imageHeight Int?
  metadata    String?     // Stored as JSON string
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  views       Int         @default(0)
  likes       Int         @default(0)
  isPublished Boolean     @default(false)
  // More granular status: draft, pending_review, technical_review, editorial_review, final_review, changes_requested, approved, rejected, archived
  status      String      @default("draft")
  featured    Boolean     @default(false) // For highlighting important articles
  qualityGrade String?    // e.g., "stub", "start", "b", "ga", "fa" based on quality assessment
  protectionLevel String  @default("none") // e.g., "none", "semi-protected", "fully-protected"
  isArchived  Boolean     @default(false) // To mark articles as archived instead of deleting
  author      User        @relation("AuthoredArticles", fields: [authorId], references: [id])
  edits       Edit[]
  comments    Comment[]
  references  Reference[]
  categories  Category[]  @relation("ArticleToCategory")
  tags        Tag[]       @relation("ArticleToTag")
  versions    Version[]
  reviews     Review[]
  reviewState ReviewState?
  branches    Branch[]    @relation("ArticleBranches")
  collaborations Collaboration[] @relation("ArticleCollaborations")
  talkMessages ArticleTalk[]
  watchers    Watchlist[] // Users watching this article
}

// Tracks the overall review process state for an article
model ReviewState {
  id            String   @id @default(cuid())
  articleId     String   @unique
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  // Represents the current major stage in the review pipeline
  currentStage  String   // e.g., "Peer Review", "Expert Review", "Admin Approval"
  startedAt     DateTime @default(now())
  lastUpdatedAt DateTime @updatedAt
  dueDate       DateTime?
  priority      String   @default("normal") // low, normal, high, urgent
  isBlocked     Boolean  @default(false)
  blockReason   String?
}

model Review {
  id          String    @id @default(cuid())
  articleId   String
  reviewerId  String
  assigneeId  String
  type        String    // technical, editorial, final
  status      String    // pending, in_progress, completed, rejected
  feedback    String?
  score       Int?      // 1-100
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  reviewer    User      @relation("ReviewedBy", fields: [reviewerId], references: [id])
  assignee    User      @relation("AssignedTo", fields: [assigneeId], references: [id])
  checklist   String?   // Stored as JSON array of completed items
  metadata    String?   // Additional review metadata as JSON string

  @@unique([articleId, type])
  @@index([articleId])
  @@index([reviewerId])
  @@index([assigneeId])
  @@index([type])
  @@index([status])
}

// Model to track which users are watching which articles for changes
model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}

// Generic model for logging important actions across the system
model AuditLog {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  userId     String? // User performing the action (null for system actions)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     String // e.g., "article_status_changed", "review_submitted", "user_role_updated"
  targetType String? // e.g., "Article", "Review", "User"
  targetId   String? // ID of the affected entity
  details    String? // JSON string with additional context (e.g., old/new status)

  @@index([timestamp])
  @@index([userId])
  @@index([action])
  @@index([targetType, targetId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[] @relation("ArticleToCategory")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[] @relation("ArticleToTag")
}

model Reference {
  id          String   @id @default(cuid())
  url         String
  title       String
  description String?
  articleId   String
  createdAt   DateTime @default(now())
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Edit {
  id        String   @id @default(cuid())
  content   String
  summary   String?
  type      String   @default("content") // content, metadata, style, etc.
  metadata  String?  // JSON string for additional edit metadata (e.g., edit tags: minor, formatting, content)
  changeSize Int?    // Optional: Could store calculated diff size, or calculate on demand
  createdAt DateTime @default(now())
  articleId String
  userId    String
  versionId String?  @unique // Make versionId unique for one-to-one relation
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  version   Version? @relation("EditVersion", fields: [versionId], references: [id], onDelete: SetNull)
}

model Version {
  id             String          @id @default(cuid())
  number         Int
  content        String
  createdAt      DateTime        @default(now())
  articleId      String
  editId         String?         @unique // Make editId unique for one-to-one relation
  branchId       String?
  article        Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  branch         Branch?         @relation(fields: [branchId], references: [id], onDelete: SetNull)
  edit           Edit?           @relation("EditVersion")
  fromDiffs      Diff[]          @relation("FromVersion")
  toDiffs        Diff[]          @relation("ToVersion")
  branchVersions BranchVersion[]

  @@unique([articleId, number])
  @@index([articleId])
  @@index([number, articleId])
  @@index([branchId])
}

model Branch {
  id             String          @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  articleId      String
  userId         String
  isDefault      Boolean         @default(false)
  isMerged       Boolean         @default(false)
  mergedAt       DateTime?
  mergedToId     String?
  article        Article         @relation("ArticleBranches", fields: [articleId], references: [id], onDelete: Cascade)
  user           User            @relation("UserBranches", fields: [userId], references: [id], onDelete: Cascade)
  mergedTo       Branch?         @relation("BranchMerges", fields: [mergedToId], references: [id], onDelete: SetNull)
  mergedFrom     Branch[]        @relation("BranchMerges")
  versions       Version[]
  branchVersions BranchVersion[]

  @@unique([articleId, name])
  @@index([articleId])
  @@index([userId])
  @@index([mergedToId])
}

model BranchVersion {
  id        String  @id @default(cuid())
  branchId  String
  versionId String
  branch    Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  version   Version @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([branchId, versionId])
  @@index([branchId])
  @@index([versionId])
}

model Diff {
  id           String   @id @default(cuid())
  changes      String   // JSON string containing diff information
  createdAt    DateTime @default(now())
  fromVersionId String
  toVersionId   String
  fromVersion   Version  @relation("FromVersion", fields: [fromVersionId], references: [id], onDelete: Cascade)
  toVersion     Version  @relation("ToVersion", fields: [toVersionId], references: [id], onDelete: Cascade)

  @@index([fromVersionId])
  @@index([toVersionId])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  parent    Comment?     @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  parentId  String?
  replies   Comment[]    @relation("CommentToComment")
  likes     Int          @default(0)
  likedBy   CommentLike[]

  @@index([articleId])
  @@index([authorId])
  @@index([parentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

model Collaboration {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  articleId   String
  article     Article  @relation("ArticleCollaborations", fields: [articleId], references: [id], onDelete: Cascade)
  contributors CollaborationContributor[]
  status      String   @default("active") // active, completed, archived
  
  @@index([articleId])
  @@index([status])
}

model CollaborationContributor {
  id              String       @id @default(cuid())
  collaborationId String
  userId          String
  role            String       @default("contributor") // owner, editor, contributor, reviewer
  joinedAt        DateTime     @default(now())
  collaboration   Collaboration @relation(fields: [collaborationId], references: [id], onDelete: Cascade)
  
  @@unique([collaborationId, userId])
  @@index([collaborationId])
  @@index([userId])
}

model ArticleTalk {
  id        String   @id @default(cuid())
  content   String
  section   String   @default("general") // general, content, sources, style, factual
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleId String
  authorId  String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([authorId])
  @@index([section])
}

// Generic discussion/talk page messages for both articles and users
model DiscussionMessage {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String
  targetId   String   // Can be Article ID or User ID
  targetType String   // "article" or "user"
  parentId   String?  // For threaded replies
  author     User     @relation("DiscussionAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent     DiscussionMessage? @relation("MessageReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies    DiscussionMessage[] @relation("MessageReplies")

  @@index([targetId, targetType])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
}
