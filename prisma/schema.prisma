generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user", "editor", "admin"
  password      String?   // Hashed password for email/password auth
  bio          String?   // User biography
  location     String?
  website      String?
  twitter      String?
  expertise    String?   // JSON string of expertise areas
  interests    String?   // JSON string of interests
  joinedAt     DateTime  @default(now())
  lastActive   DateTime  @default(now())
  accounts     Account[]
  sessions     Session[]
  articles     Article[] @relation("AuthoredArticles")
  edits        Edit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String      @id @default(cuid())
  title       String
  content     String      // Markdown content
  summary     String
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  author      User        @relation("AuthoredArticles", fields: [authorId], references: [id])
  categories  Category[]
  tags        Tag[]
  references  Reference[]
  edits       Edit[]
  views       Int         @default(0)
  isPublished Boolean     @default(false)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  articles    Article[]
  createdAt   DateTime  @default(now())
}

model Reference {
  id          String   @id @default(cuid())
  url         String
  title       String
  description String?
  articleId   String
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Edit {
  id          String   @id @default(cuid())
  content     String   // Previous content for version history
  summary     String?  // Edit summary
  createdAt   DateTime @default(now())
  articleId   String
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
